{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "Liquid Gears Document Search API",
    "contact": {
      "email": "info@liquid-state.com",
      "url": "https://liquid-gears.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "x-logo": {
      "url": "./logo.png"
    },
    "description": "This API is used to query Documents and Document Pages published by Ubiquity Dashboard  and indexed by the Document Search service.\n# Introduction\nWhen publishing a Document in Ubiquity Dashboard, the Document Search backend service  asynchronously indexes the Document Pages. The body of a Document Page is turned into plain text which gets indexed. The metadata of a Document Page is also stored and indexed.\n\n  Using this API, you can query the indexed Document Pages in two ways:\n  * Full Text Search (FTS) on the body of the Document Page\n  * JSON search on the metadata of a Document Page\n\nAs of now, both types of searches cannot be combined.\n"
  },
  "externalDocs": {
    "description": "Visit the Liquid Gears technical documentation to explore the LG Platform.",
    "url": "https://docs.liquid-gears.com"
  },
  "servers": [
    {
      "url": "http://example.com/api/v1"
    },
    {
      "url": "https://example.com/api/v1"
    }
  ],
  "paths": {
    "/query": {
      "get": {
        "tags": [
          "FTS Query"
        ],
        "summary": "/query",
        "description": "Full-text search (FTS) query on the body of Document Pages",
        "operationId": "query",
        "parameters": [
          {
            "name": "app",
            "in": "query",
            "description": "The token of the app results should be obtained from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc123"
          },
          {
            "name": "term",
            "in": "query",
            "description": "The term to perform a full-text search for",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "test"
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns search results as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "$ref": "#/components/examples/ResultList"
                  }
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "Python",
            "source": "API.v1.Echo echo = new API.v1.Echo();\necho.message = \"Hello World!\");\nEchoResponse response = echo.post();\nif (response.statusCode == HttpStatusCode.Created)\n{\n  // Success\n}\nelse\n{\n  // Something wrong -- check response for errors\n  Console.WriteLine(response.getRawResponse());\n}\n"
          }
        ]
      }
    },
    "/query/data": {
      "get": {
        "tags": [
          "Metadata Query"
        ],
        "summary": "/query/data",
        "description": "Query the Document Pages JSON metadata",
        "operationId": "query-data",
        "parameters": [
          {
            "name": "app",
            "in": "query",
            "description": "The token of the app results should be obtained from",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "abc123"
          },
          {
            "name": "search",
            "in": "query",
            "description": "URL-encoded JSON description of metadata search rules\n\nBoth the Documents and Document Pages metadata can be searched by specifying a \nJSON object describing the Document and Document Pages to match.\n\n```json\n  [\n    {\n        \"document\": {\n            \"selectAll\": false,\n            \"isOperatorOr\": false,\n            \"rules\": [\n                {\n                    \"predicate\": \"tags\",\n                    \"operator\": \"contains\",\n                    \"values\": {\n                        \"default\": \"tag 1\"\n                    }\n                }\n            ]\n        },\n        \"page\": {\n            \"selectAll\": false,\n            \"isOperatorOr\": true,\n            \"rules\": [\n                {\n                    \"predicate\": \"tags\",\n                    \"operator\": \"contains\",\n                    \"values\": {\n                        \"default\": \"tag 1\"\n                    }\n                },\n                {\n                    \"predicate\": \"tags\",\n                    \"operator\": \"contains\",\n                    \"values\": {\n                        \"default\": \"tag 2\"\n                    }\n                }\n            ]\n        }\n    }\n  ]\n```\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK - Returns search results as JSON",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "response": {
                    "$ref": "#/components/examples/ResultList"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Email": {
        "description": "User email address",
        "type": "string",
        "format": "test",
        "example": "john.smith@example.com"
      },
      "User": {
        "type": "object",
        "properties": {
          "username": {
            "description": "User supplied username",
            "type": "string",
            "minLength": 4,
            "example": "John78"
          },
          "firstName": {
            "description": "User first name",
            "type": "string",
            "minLength": 1,
            "example": "John"
          },
          "lastName": {
            "description": "User last name",
            "type": "string",
            "minLength": 1,
            "example": "Smith"
          },
          "email": {
            "$ref": "#/components/schemas/Email"
          }
        }
      }
    },
    "examples": {
      "ResultList": {
        "summary": "Result list",
        "value": {
          "results": [
            {
              "pk": 1,
              "slug": "page 1",
              "title": "Page 1",
              "source_url": "https://cms-domain-slug.s3.amazonaws.com/c/COMPANY_TOKEN/apps/APP_TOKEN/issues/ISSUE_TOKEN/versions/1/published/0001-PAGE_TOKEN-PAGE-SLUG/index.html",
              "metadata": {
                "tags": [
                  {
                    "term": "tag 1",
                    "label": "tag 1"
                  }
                ]
              },
              "rank": 1,
              "doc_id": "com.company.app.document-token",
              "search_type": "title"
            },
            {
              "pk": 2,
              "slug": "page 2",
              "title": "Page 2",
              "source_url": "https://cms-domain-slug.s3.amazonaws.com/c/COMPANY_TOKEN/apps/APP_TOKEN/issues/ISSUE_TOKEN/versions/1/published/0001-PAGE_TOKEN-PAGE-SLUG/index.html",
              "metadata": {
                "tags": [
                  {
                    "term": "tag 2",
                    "label": "tag 2"
                  }
                ]
              },
              "rank": 2,
              "doc_id": "com.company.app.document-token",
              "search_type": "title"
            }
          ]
        }
      }
    },
    "headers": {
      "ExpiresAfter": {
        "description": "date in UTC when token expires",
        "schema": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "in": "header",
        "name": "api_key"
      },
      "basic_auth": {
        "type": "http",
        "scheme": "basic"
      },
      "main_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "http://example.com/api/oauth/dialog",
            "scopes": {
              "read:users": "read users info",
              "write:users": "modify or remove users"
            }
          }
        }
      }
    }
  }
}
