openapi: 3.0.0
info:
  version: 1.0.0
  title: Liquid Gears Document Search API
  contact:
    email: info@liquid-state.com
    url: 'https://liquid-gears.com'
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  x-logo:
    url: ./logo.png
  description: |
    This API is used to query Documents and Document Pages published by Ubiquity Dashboard  and indexed by the Document Search service.
    # Introduction
    When publishing a Document in Ubiquity Dashboard, the Document Search backend service  asynchronously indexes the Document Pages. The body of a Document Page is turned into plain text which gets indexed. The metadata of a Document Page is also stored and indexed.

      Using this API, you can query the indexed Document Pages in two ways:
      * Full Text Search (FTS) on the body of the Document Page
      * JSON search on the metadata of a Document Page

    As of now, both types of searches cannot be combined.
externalDocs:
  description: Visit the Liquid Gears technical documentation to explore the LG Platform.
  url: 'https://docs.liquid-gears.com'
tags:
  - name: Echo
    description: Example echo operations
  - name: User
    description: Operations about user
servers:
  - url: 'http://example.com/api/v1'
  - url: 'https://example.com/api/v1'
paths:
  /echo:
    post:
      tags:
        - Echo
      summary: Echo test
      description: Receive the exact message you've sent
      operationId: echo
      security:
        - api_key: []
        - basic_auth: []
      responses:
        '200':
          description: OK
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              $ref: '#/components/headers/ExpiresAfter'
          content:
            application/json:
              schema:
                type: string
              examples:
                response:
                  value: Hello world!
            application/xml:
              schema:
                type: string
            text/csv:
              schema:
                type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
              example: Hello world!
          application/xml:
            schema:
              type: string
              example: Hello world!
        description: Echo payload
        required: true
      x-code-samples:
        - lang: 'C#'
          source: |
            API.v1.Echo echo = new API.v1.Echo();
            echo.message = "Hello World!");
            EchoResponse response = echo.post();
            if (response.statusCode == HttpStatusCode.Created)
            {
              // Success
            }
            else
            {
              // Something wrong -- check response for errors
              Console.WriteLine(response.getRawResponse());
            }
        - lang: PHP
          source: |
            $form = new \API\Entities\Echo();
            $form->setMessage("Hello World!");
            try {
                $pet = $client->echo()->post($form);
            } catch (UnprocessableEntityException $e) {
                var_dump($e->getErrors());
            }
  /query:
    get:
      tags:
        - Query
      summary: Query
      description: Full-text search (FTS) query on the body of Document Pages
      operationId: query
      parameters:
        - name: app
          in: query
          description: The token of the app results should be obtained from
          required: true
          schema:
            type: string
          example: abc123
        - name: term
          in: query
          description: The term to search for
          required: true
          schema:
            type: string
          example: test
      responses:
        '200':
          description: OK - Returns search results as JSON
          content:
            application/json:
              schema:
                type: object
              examples:
                response:
                  $ref: '#/components/examples/ResultList'
  '/users/{username}':
    parameters:
      - name: pretty_print
        in: query
        description: Pretty print response
        schema:
          type: boolean
    get:
      tags:
        - User
      summary: Get user by user name
      description: |
        Some description of the operation. 
        You can use `markdown` here.
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched
          required: true
          schema:
            type: string
        - name: with_email
          in: query
          description: Filter users without email
          schema:
            type: boolean
      security:
        - main_auth:
            - 'read:users'
        - api_key: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                username: user1
                email: user@example.com
        '403':
          description: Forbidden
        '404':
          description: User not found
    put:
      tags:
        - User
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be updated
          required: true
          schema:
            type: string
      security:
        - main_auth:
            - 'write:users'
      responses:
        '200':
          description: OK
        '400':
          description: Invalid user supplied
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
        description: Updated user object
        required: true
components:
  schemas:
    Email:
      description: User email address
      type: string
      format: test
      example: john.smith@example.com
    User:
      type: object
      properties:
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          $ref: '#/components/schemas/Email'
  examples:
    ResultList:
      summary: Result list
      value:
        results:
          - pk: 1
            slug: page 1
            title: Page 1
            source_url: 'https://cms-domain-slug.s3.amazonaws.com/c/COMPANY_TOKEN/apps/APP_TOKEN/issues/ISSUE_TOKEN/versions/1/published/0001-PAGE_TOKEN-PAGE-SLUG/index.html'
            rank: 1
            doc_id: com.company.app.document-token
            search_type: title
          - pk: 2
            slug: page 2
            title: Page 2
            source_url: 'https://cms-domain-slug.s3.amazonaws.com/c/COMPANY_TOKEN/apps/APP_TOKEN/issues/ISSUE_TOKEN/versions/1/published/0001-PAGE_TOKEN-PAGE-SLUG/index.html'
            rank: 2
            doc_id: com.company.app.document-token
            search_type: title
  headers:
    ExpiresAfter:
      description: date in UTC when token expires
      schema:
        type: string
        format: date-time
  securitySchemes:
    api_key:
      type: apiKey
      in: header
      name: api_key
    basic_auth:
      type: http
      scheme: basic
    main_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'http://example.com/api/oauth/dialog'
          scopes:
            'read:users': read users info
            'write:users': modify or remove users
